package com.example.receiptprocessor.service;

import org.junit.jupiter.api.Test;
import com.example.receiptprocessor.service.ReceiptService;
import com.example.receiptprocessor.model.Receipt;
import com.example.receiptprocessor.model.ReceiptItem;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class ReceiptServiceTests {

    @Test
    void testRetailerNamePoints() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("ABC123"); // retailer name has 6 characters
        receipt.setTotal("1.1");
        receipt.setItems(null);
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("12:00");

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(6);
    }

    @Test
    void testRoundDollarTotalBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("50.00"); // Total = 50.00 is a round dollar amount
        receipt.setItems(null);
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("12:00");

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(80);
    }

    @Test
    void testMultipleOfQuarterBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("3.25"); // Total = 3.25 is a multiple of 0.25
        receipt.setItems(null);
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("12:00");

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(30);
    }

    @Test
    void testEveryTwoItemsBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("2.2");
        receipt.setItems(null);
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("12:00");

        List<ReceiptItem> items = Arrays.asList(
                new ReceiptItem("Gatorade", "1.1"),
                new ReceiptItem("Gatorade", "1.1")
        );
        receipt.setItems(items);

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(10);
    }

    @Test
    void testItemDescriptionBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("1.1");
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("12:00");

        ReceiptItem item = new ReceiptItem("   ABC   ", "10.00"); // a multiple of 3 after trim
        List<ReceiptItem> items = new ArrayList<>();
        items.add(item);
        receipt.setItems(items);

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(7);
    }

    @Test
    void testLLMTotalGreaterThan10Bonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("11.10"); // Total > 10.00
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("10:00");
        receipt.setItems(null);

        ReceiptService receiptService = new ReceiptService();
        receiptService.setLargeLanguageModel(true); // Generated by a large language mode
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(10);
    }

    @Test
    void testOddDayBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("1.1");
        receipt.setPurchaseDate("2022-01-03"); // Day = 3 is odd
        receipt.setPurchaseTime("12:00");
        receipt.setItems(null);

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(11);
    }

    @Test
    void testTimeBonus() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("Store");
        receipt.setTotal("1.1");
        receipt.setPurchaseDate("2022-01-02");
        receipt.setPurchaseTime("14:15"); // Between 2:00pm and 4:00pm
        receipt.setItems(null);

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(15);
    }

    @Test
    void testMultipleRulesCombined() {
        Receipt receipt = new Receipt();
        receipt.setRetailer("M&M Corner Market");
        receipt.setPurchaseDate("2022-03-20");
        receipt.setPurchaseTime("14:33");
        receipt.setTotal("9.00");

        List<ReceiptItem> items = Arrays.asList(
                new ReceiptItem("Gatorade", "2.25"),
                new ReceiptItem("Gatorade", "2.25"),
                new ReceiptItem("Gatorade", "2.25"),
                new ReceiptItem("Gatorade", "2.25")
        );
        receipt.setItems(items);

        ReceiptService receiptService = new ReceiptService();
        setLLMFalse(receiptService);
        int points = receiptService.calculatePoints(receipt);
        assertThat(points).isEqualTo(109);
    }

    public void setLLMFalse(ReceiptService receiptService) {
        receiptService.setLargeLanguageModel(false);
        return;
    }
}
